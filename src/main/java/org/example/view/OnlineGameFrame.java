/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.example.view;

import org.example.controllers.QuestionController;
import org.example.model.PlayAudioURL;
import org.example.model.PlayerModel;
import org.example.model.QuestionModel;
import org.example.network.GameClient;
import org.example.network.Message;
import org.example.network.MessageType;
import org.example.view.helpCall.HelpCallFrame;
import org.example.view.helpCall.OnlineHelpCallFrame;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.sound.sampled.Clip;
import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * @author Ngọc Viên
 */
public class OnlineGameFrame extends javax.swing.JFrame {

    /**
     * Creates new form GameFrame
     */
    public OnlineGameFrame(PlayerModel currentPlayer, GameClient gameClient, String roomId, PlayerModel opponentPlayer) throws Exception {
        this.currentPlayer = currentPlayer;
        this.gameClient = gameClient;
        this.roomId = roomId;
        this.opponentPlayer = opponentPlayer;
        initComponents();
        setResizable(false);
        setLocation(320, 140);

        setupOnlineGameUI();
        addOnlineGameListeners();

        PlayAudioURL.playAudio(getClass().getResource("/audio/bat dau di tim ai la trieu phu.wav"), -5);
        fisrtEvenHandler();
        eventHandler();
        disableButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        versusIcon = new javax.swing.JLabel();
        setAvatarButon = new javax.swing.JButton();
        avatarLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        unameAndAvtLabel = new javax.swing.JLabel();
        stopButon = new javax.swing.JButton();
        chatPane = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        gameStatusLabel = new javax.swing.JLabel();
        sendChatInGameButton = new javax.swing.JButton();
        chatInputFieldInGame = new javax.swing.JTextField();
        chatLabel = new javax.swing.JLabel();
        stopLabel = new javax.swing.JLabel();
        x3 = new javax.swing.JLabel();
        x2 = new javax.swing.JLabel();
        x1 = new javax.swing.JLabel();
        helpYKienKhanGIaButon = new javax.swing.JButton();
        helpCallButon = new javax.swing.JButton();
        help5050Buton = new javax.swing.JButton();
        helpYKienKhanGIaLabel = new javax.swing.JLabel();
        helpCallLabel = new javax.swing.JLabel();
        help5050Label = new javax.swing.JLabel();
        opponentScoreLabel = new javax.swing.JLabel();
        questionCurrentIndexLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        bButon = new javax.swing.JButton();
        dButon = new javax.swing.JButton();
        aButon = new javax.swing.JButton();
        cButon = new javax.swing.JButton();
        moneyLabel = new javax.swing.JLabel();
        scoreLabel1 = new javax.swing.JLabel();
        opponentNameLabel = new javax.swing.JLabel();
        opponentAvatarLabel = new javax.swing.JLabel();
        unameAndAvtLabel1 = new javax.swing.JLabel();
        aiLaTrieuPhuText = new javax.swing.JLabel();
        questionLabel = new javax.swing.JLabel();
        questionAndAnswerLable = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        laiVanSam = new javax.swing.JLabel();
        moneyShowLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        quitItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        versusIcon.setFont(new java.awt.Font("Ink Free", 1, 18)); // NOI18N
        versusIcon.setForeground(new java.awt.Color(255, 255, 255));
        versusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/vs.png"))); // NOI18N
        getContentPane().add(versusIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 6, 70, 60));
        getContentPane().add(setAvatarButon, new org.netbeans.lib.awtextra.AbsoluteConstraints(633, 20, 30, 30));

        avatarLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/avatar/1.png"))); // NOI18N
        getContentPane().add(avatarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 21, -1, -1));

        usernameLabel.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        usernameLabel.setForeground(new java.awt.Color(255, 255, 255));
        usernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        usernameLabel.setText("ngocvien");
        getContentPane().add(usernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(668, 24, 100, -1));

        unameAndAvtLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/uname and avt.png"))); // NOI18N
        getContentPane().add(unameAndAvtLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 17, -1, -1));

        stopButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButonActionPerformed(evt);
            }
        });
        getContentPane().add(stopButon, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 210, 67, 25));

        chatPane.setPreferredSize(new java.awt.Dimension(186, 78));

        chatArea.setBackground(new java.awt.Color(81, 125, 175));
        chatArea.setColumns(20);
        chatArea.setForeground(new java.awt.Color(255, 255, 255));
        chatArea.setRows(5);
        chatPane.setViewportView(chatArea);

        getContentPane().add(chatPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 206, 172, 264));

        gameStatusLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gameStatusLabel.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(gameStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 250, -1, -1));

        sendChatInGameButton.setBackground(new java.awt.Color(0, 102, 153));
        sendChatInGameButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        sendChatInGameButton.setForeground(new java.awt.Color(255, 255, 255));
        sendChatInGameButton.setText("Gởi");
        getContentPane().add(sendChatInGameButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 470, 55, 25));
        getContentPane().add(chatInputFieldInGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 469, 119, 25));

        chatLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/khungchat.png"))); // NOI18N
        getContentPane().add(chatLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, -1));

        stopLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/stopButon.png"))); // NOI18N
        getContentPane().add(stopLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 200, -1, -1));

        x3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/X.png"))); // NOI18N
        getContentPane().add(x3, new org.netbeans.lib.awtextra.AbsoluteConstraints(912, 74, -1, -1));

        x2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/X.png"))); // NOI18N
        getContentPane().add(x2, new org.netbeans.lib.awtextra.AbsoluteConstraints(853, 74, -1, -1));

        x1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/X.png"))); // NOI18N
        getContentPane().add(x1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 74, -1, -1));
        getContentPane().add(helpYKienKhanGIaButon, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 78, 45, 29));
        getContentPane().add(helpCallButon, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 78, 45, 29));
        getContentPane().add(help5050Buton, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 78, 45, 29));

        helpYKienKhanGIaLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/y kien khan gia.png"))); // NOI18N
        getContentPane().add(helpYKienKhanGIaLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(906, 76, -1, -1));

        helpCallLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/goi dien nguoi than.png"))); // NOI18N
        getContentPane().add(helpCallLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(846, 76, -1, -1));

        help5050Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/50-50.png"))); // NOI18N
        getContentPane().add(help5050Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(785, 76, -1, -1));

        opponentScoreLabel.setFont(new java.awt.Font("Calibri", 3, 16)); // NOI18N
        opponentScoreLabel.setForeground(new java.awt.Color(255, 255, 255));
        opponentScoreLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        opponentScoreLabel.setText("0");
        getContentPane().add(opponentScoreLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(275, 23, 90, 30));

        questionCurrentIndexLabel.setFont(new java.awt.Font("Eras Bold ITC", 1, 15)); // NOI18N
        questionCurrentIndexLabel.setForeground(new java.awt.Color(10, 47, 104));
        getContentPane().add(questionCurrentIndexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 252, -1, -1));

        scoreLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/TongThuong3.png"))); // NOI18N
        getContentPane().add(scoreLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, -1, -1));

        bButon.setBackground(new java.awt.Color(247, 248, 211));
        bButon.setText(" ");
        bButon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bButon.setMaximumSize(new java.awt.Dimension(45, 20));
        bButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bButonActionPerformed(evt);
            }
        });
        getContentPane().add(bButon, new org.netbeans.lib.awtextra.AbsoluteConstraints(507, 370, 241, 54));

        dButon.setBackground(new java.awt.Color(247, 248, 211));
        dButon.setText(" ");
        dButon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dButonActionPerformed(evt);
            }
        });
        getContentPane().add(dButon, new org.netbeans.lib.awtextra.AbsoluteConstraints(507, 443, 241, 54));

        aButon.setBackground(new java.awt.Color(247, 248, 211));
        aButon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        aButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aButonActionPerformed(evt);
            }
        });
        getContentPane().add(aButon, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 370, 241, 54));

        cButon.setBackground(new java.awt.Color(247, 248, 211));
        cButon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cButonActionPerformed(evt);
            }
        });
        getContentPane().add(cButon, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 443, 241, 54));

        moneyLabel.setFont(new java.awt.Font("Calibri", 3, 16)); // NOI18N
        moneyLabel.setForeground(new java.awt.Color(255, 255, 255));
        moneyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        moneyLabel.setText("0");
        getContentPane().add(moneyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(828, 23, 90, 30));

        scoreLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/TongThuong.png"))); // NOI18N
        getContentPane().add(scoreLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, -1, -1));

        opponentNameLabel.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        opponentNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        opponentNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        opponentNameLabel.setText("thiennhan");
        getContentPane().add(opponentNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 24, 100, -1));

        opponentAvatarLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/avatar/1.png"))); // NOI18N
        getContentPane().add(opponentAvatarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, -1, -1));

        unameAndAvtLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/opponentAvatar.png"))); // NOI18N
        getContentPane().add(unameAndAvtLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 17, -1, -1));

        aiLaTrieuPhuText.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/AiLaTrieuPhu-Smaller.png"))); // NOI18N
        getContentPane().add(aiLaTrieuPhuText, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 60, 300, 140));

        questionLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        questionLabel.setForeground(new java.awt.Color(255, 255, 255));
        questionLabel.setText("BẮT ĐẦU ĐI TÌM \"AI LÀ TRIỆU PHÚ\"");
        getContentPane().add(questionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 289, 500, 40));

        questionAndAnswerLable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/Question and Answer.png"))); // NOI18N
        getContentPane().add(questionAndAnswerLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 271, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/Câu số_.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(227, 247, -1, -1));

        laiVanSam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/laivansam.png"))); // NOI18N
        getContentPane().add(laiVanSam, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, -1, -1));

        moneyShowLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elements/Money.png"))); // NOI18N
        getContentPane().add(moneyShowLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 90, -1, -1));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background/online-bg.png"))); // NOI18N
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 540));

        jMenuBar1.setBackground(new java.awt.Color(132, 210, 255));

        jMenu1.setText("File");

        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        jMenu1.add(quitItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dButonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dButonActionPerformed

    private void bButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bButonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bButonActionPerformed

    private void aButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aButonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aButonActionPerformed

    private void cButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cButonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cButonActionPerformed

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quitItemActionPerformed

    private void stopButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stopButonActionPerformed

    //    /**
//     * @param  the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GameFrame().setVisible(true);
//            }
//        });
//    }
    public static void display(PlayerModel player, GameClient client, String roomId, PlayerModel opponent) {
        SwingUtilities.invokeLater(() -> {
            try {
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            OnlineGameFrame frame = null;
            try {
                frame = new OnlineGameFrame(player, client, roomId, opponent);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            frame.setTitle("Phòng " + roomId + " - " + player.getUsername() + " vs " + opponent.getUsername());
            frame.setVisible(true);
            // Register with client after frame is visible
            client.setOnlineGameFrame(frame);
        });
    }

    static void makeButtonTransparent(JButton button) {
        button.setContentAreaFilled(false);
        button.setOpaque(false);
    }

    private void fisrtEvenHandler() {
        setDefaultCloseOperation(0);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
//                int response = JOptionPane.showConfirmDialog(null,
//                        "Bạn có chắc chắn muốn thoát?", "Thông báo", JOptionPane.YES_NO_OPTION,
//                        JOptionPane.QUESTION_MESSAGE);
//                if (response == JOptionPane.YES_OPTION) {
//                    PlayAudioURL.stopAudio(question1to5Audio);
//                    dispose();
//                }
            }
        });
        //hien username va avatar
        usernameLabel.setText(currentPlayer.getUsername());
        avatarLabel.setIcon(new ImageIcon(getClass().getResource("/avatar/" + currentPlayer.getAvatarPath() + ".png")));

        //ẩn các dấu X
        x1.setVisible(false);
        x2.setVisible(false);
        x3.setVisible(false);


        //trong suot buton
        makeButtonTransparent(setAvatarButon);
        makeButtonTransparent(stopButon);
        makeButtonTransparent(helpCallButon);
        makeButtonTransparent(help5050Buton);
        makeButtonTransparent(helpYKienKhanGIaButon);


    }

    private void eventHandler() throws Exception {

        disableCallCalled=false;
        disableKhanGiaCalled=false;
        disable5050Called=false;
        setEableButon();


//        question1to5Audio = PlayAudio.playStartAudio("src/main/resources/audio/question1to5.wav", -10);
        question1to5Audio = PlayAudioURL.playStartAudio(getClass().getResource("/audio/question1to5.wav"), -10);
        aButon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        bButon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        cButon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        dButon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        setAvatarButon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        help5050Buton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        helpCallButon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        helpYKienKhanGIaButon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        stopButon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        //phát âm thanh khi di chuyển chuột đến
        stopButon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
//                PlayAudio.playAudio("src/main/java/org/example/file/audio/butonTouch.wav", -4);
                PlayAudioURL.playAudio(getClass().getResource("/audio/butonTouch.wav"),-4);
            }
        });
        helpYKienKhanGIaButon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (disableKhanGiaCalled)
                    PlayAudioURL.wrongSound();
                else
//                    PlayAudio.playAudio("src/main/java/org/example/file/audio/butonTouch.wav", -4);
                    PlayAudioURL.playAudio(getClass().getResource("/audio/butonTouch.wav"),-4);
            }
        });
        helpCallButon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (disableCallCalled)
                    PlayAudioURL.wrongSound();
                else
//                    PlayAudio.playAudio("src/main/java/org/example/file/audio/butonTouch.wav", -4);
                    PlayAudioURL.playAudio(getClass().getResource("/audio/butonTouch.wav"),-4);
            }
        });
        help5050Buton.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (disable5050Called)
                    PlayAudioURL.wrongSound();
                else
                    PlayAudioURL.playAudio(getClass().getResource("/audio/butonTouch.wav"),-4);
            }
        });
        aButon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PlayAudioURL.playAudio(getClass().getResource("/audio/butonTouch2.wav"),-5);
            }
        });
        bButon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PlayAudioURL.playAudio(getClass().getResource("/audio/butonTouch2.wav"),-5);
            }
        });
        cButon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PlayAudioURL.playAudio(getClass().getResource("/audio/butonTouch2.wav"),-5);
            }
        });
        dButon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PlayAudioURL.playAudio(getClass().getResource("/audio/butonTouch2.wav"),-5);
            }
        });


//        questionController = new QuestionController();
//        questionCurrentIndex = 0;
//        scoreLevel = new int[]{100000, 200000, 300000, 500000, 1000000, 2000000, 4000000, 6000000, 8000000, 12000000,
//                16000000, 32000000, 40000000, 56000000, 100000000};
//        moneyLevel = new String[]{"100.000", "200.000", "300.000", "500.000", "1 TRIỆU", "2 TRIỆU",
//                "4 TRIỆU", "6 TRIỆU", "8 TRIỆU", "12 TRIỆU", "16 TRIỆU", "32 TRIỆU", "40 TRIỆU", "56 TRIỆU", "100 TRIỆU"};
//        money = "0";
//        questionModel = questionController.getQuestions().get(questionCurrentIndex);
//        answerRight = questionModel.getCorrectAnswer();
//
//
//        setQuesAndAnswer(questionModel);

        //helpsButon


    }

    public static void disable5050() {
        help5050Buton.setEnabled(false);
        x1.setVisible(true);
        disable5050Called = true;
    }

    public static void disableCall() {
        helpCallButon.setEnabled(false);
        x2.setVisible(true);
        disableCallCalled = true;
    }

    public static void disableKhanGia() {
        helpYKienKhanGIaButon.setEnabled(false);
        x3.setVisible(true);
        disableKhanGiaCalled = true;
    }

    private void disableButtons()// vô hiệu hóa chức năng của các nút
    {
        aButon.setEnabled(false);
        bButon.setEnabled(false);
        cButon.setEnabled(false);
        dButon.setEnabled(false);
        help5050Buton.setEnabled(false);
        helpCallButon.setEnabled(false);
        helpYKienKhanGIaButon.setEnabled(false);
    }

    public static void setEableButon()// mở lại chức năng
    {
        aButon.setEnabled(true);
        bButon.setEnabled(true);
        cButon.setEnabled(true);
        dButon.setEnabled(true);
        if (!disable5050Called)
            help5050Buton.setEnabled(true);
        if (!disableCallCalled)
            helpCallButon.setEnabled(true);
        if (!disableKhanGiaCalled)
            helpYKienKhanGIaButon.setEnabled(true);
    }

    private void setupOnlineGameUI() {
        help5050UsedClient = false;
        helpCallUsedClient = false;
        helpAudienceUsedClient = false;
        if (help5050Buton != null) help5050Buton.setVisible(true);
        if (helpCallButon != null) helpCallButon.setVisible(true);
        if (helpYKienKhanGIaButon != null) helpYKienKhanGIaButon.setVisible(true);


        // Hiển thị thông tin người chơi hiện tại
        if (avatarLabel != null) {
            if (currentPlayer.getAvatarPath() != null && !currentPlayer.getAvatarPath().isEmpty()) {
                avatarLabel.setIcon(new ImageIcon(getClass().getResource("/avatar/" + currentPlayer.getAvatarPath() + ".png")));
            } else {
                avatarLabel.setIcon(new ImageIcon(getClass().getResource("/avatar/default.png")));
            }
        }
        if (usernameLabel != null) usernameLabel.setText(currentPlayer.getUsername());
        if (moneyLabel != null) moneyLabel.setText("Điểm: 0");
        myOnlineScore = 0;
        questionCurrentIndex = 0; // Reset thứ tự câu hỏi về 0

        // Hiển thị thông tin đối thủ ban đầu
        if (opponentPlayer != null) {
            updateOpponentDisplay(opponentPlayer.getUsername(), opponentPlayer.getAvatarPath(), 0);
        } else {
            if (opponentNameLabel != null) opponentNameLabel.setText("Đối thủ: Đang chờ...");
            if (opponentAvatarLabel != null)
                opponentAvatarLabel.setIcon(new ImageIcon(getClass().getResource("/avatar/default.png")));
            if (opponentScoreLabel != null) opponentScoreLabel.setText("Điểm: 0");
        }

        disableButtons();
        if (questionLabel != null) questionLabel.setText("Đang chờ câu hỏi từ server...");
        if (questionCurrentIndexLabel != null)
            questionCurrentIndexLabel.setText("0"); // Hiển thị số 0 khi chưa có câu hỏi

//        // Ẩn nút trợ giúp
//        if (help5050Buton != null) help5050Buton.setVisible(false);
//        if (helpCallButon != null) helpCallButon.setVisible(false);
//        if (helpYKienKhanGIaButon != null) helpYKienKhanGIaButon.setVisible(false);
        if (x1 != null) x1.setVisible(false);
        if (x2 != null) x2.setVisible(false);
        if (x3 != null) x3.setVisible(false);

        if (gameStatusLabel != null) gameStatusLabel.setText("Đang kết nối và chờ game...");
        help5050UsedClient = false;
        helpCallUsedClient = false;
        helpAudienceUsedClient = false;
        updateHelpButtonStates();
    }

    public void updateOpponentDisplay(String name, String avatarPath, int score) {
        SwingUtilities.invokeLater(() -> {
            if (opponentNameLabel != null) opponentNameLabel.setText("" + name);
            if (opponentScoreLabel != null) opponentScoreLabel.setText("" + score);
            if (opponentAvatarLabel != null) {
                try {
                    if (avatarPath != null && !avatarPath.isEmpty()) {
                        // Resize ảnh avatar của đối thủ nếu cần
                        ImageIcon opponentIcon = new ImageIcon(getClass().getResource("/avatar/" + avatarPath + ".png"));
                        Image image = opponentIcon.getImage().getScaledInstance(avatarLabel.getWidth(), avatarLabel.getHeight(), Image.SCALE_SMOOTH); // Lấy kích thước của avatarLabel chính
                        opponentAvatarLabel.setIcon(new ImageIcon(image));
                    } else {
                        opponentAvatarLabel.setIcon(new ImageIcon(getClass().getResource("/avatar/default.png")));
                    }
                } catch (Exception e) {
                    opponentAvatarLabel.setIcon(new ImageIcon(getClass().getResource("/avatar/default.png")));
                    logger.warning("Không tải được avatar đối thủ: " + avatarPath);
                }
            }
        });
    }

    private void addOnlineGameListeners() {
        ActionListener answerListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!gameClient.isConnected()) {
                    showErrorMessage("Mất kết nối tới server!");
                    return;
                }
                PlayAudioURL.playClickAudio();
                JButton clickedButton = (JButton) e.getSource();
                int selectedAnswerIndex = -1;
                if (clickedButton == aButon) selectedAnswerIndex = 1;
                else if (clickedButton == bButon) selectedAnswerIndex = 2;
                else if (clickedButton == cButon) selectedAnswerIndex = 3;
                else if (clickedButton == dButon) selectedAnswerIndex = 4;

                if (selectedAnswerIndex != -1 && currentQuestion != null) {
                    currentSelectedAnswer = selectedAnswerIndex;
                    gameClient.sendMessage(new Message(MessageType.C2S_SUBMIT_ANSWER, new Object[]{currentQuestion.getId(), currentSelectedAnswer}));
                    disableButtons();
                    if (gameStatusLabel != null) gameStatusLabel.setText("Đã gửi câu trả lời. Chờ kết quả...");
                    logger.info("Người chơi " + currentPlayer.getUsername() + " đã chọn đáp án " + currentSelectedAnswer + " cho câu hỏi ID " + currentQuestion.getId());
                }
            }
        };

        if (aButon != null) aButon.addActionListener(answerListener);
        if (bButon != null) bButon.addActionListener(answerListener);
        if (cButon != null) cButon.addActionListener(answerListener);
        if (dButon != null) dButon.addActionListener(answerListener);

        if (stopButon != null) {
            stopButon.addActionListener(e -> {
                if (!gameClient.isConnected()) {
                    showErrorMessage("Mất kết nối tới server!");
                    // Có thể đóng frame hoặc quay lại lobby/mode selection
                    return;
                }
                PlayAudioURL.playClickAudio();
                int confirm = JOptionPane.showConfirmDialog(this,
                        "Bạn có chắc muốn rời trận đấu này không? (Sẽ bị xử thua)",
                        "Xác Nhận Rời Trận", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    // Cần định nghĩa MessageType.C2S_LEAVE_GAME trong enum MessageType
                    PlayAudioURL.stopAudio(question1to5Audio);
                    gameClient.sendMessage(new Message(MessageType.valueOf("C2S_LEAVE_GAME"), roomId));
                }
            });
        }

        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (gameClient.isConnected()) {
                    int confirm = JOptionPane.showConfirmDialog(OnlineGameFrame.this,
                            "Bạn có chắc muốn rời trận và thoát không? (Sẽ bị xử thua)",
                            "Xác Nhận Thoát", JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        gameClient.sendMessage(new Message(MessageType.valueOf("C2S_LEAVE_GAME"), roomId));
                        // Server nên xử lý và client có thể nhận S2C_GAME_OVER hoặc 1 tin nhắn xác nhận rời phòng
                        // Sau đó GameClient sẽ điều hướng về LobbyFrame hoặc ModeSelectionFrame
                        // Tạm thời dispose()
                        gameClient.disconnect(); // Ngắt kết nối khi đóng cửa sổ game
                        dispose();
                        ModeSelectionFrame.display(currentPlayer); // Quay lại màn hình chọn chế độ
                    }
                } else {
                    dispose(); // Nếu không còn kết nối thì đóng luôn
                    ModeSelectionFrame.display(currentPlayer);
                }
            }
        });

        if (help5050Buton != null) {
            help5050Buton.addActionListener(e -> {
                if (!help5050UsedClient && currentQuestion != null) {
                    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn dùng trợ giúp 50/50 không?", "Xác nhận 50/50", JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        PlayAudioURL.playClickAudio();
                        gameClient.sendMessage(new Message(MessageType.C2S_USE_HELP_5050, new Object[]{roomId, currentQuestion.getId()}));
                        if (gameStatusLabel != null) gameStatusLabel.setText("Đang yêu cầu trợ giúp 50/50...");
                        // Không set help5050UsedClient = true ngay, đợi xác nhận từ server
                         help5050Buton.setEnabled(false); // Vô hiệu hóa tạm thời
                    }
                }
            });
        }


//        if (helpYKienKhanGIaButon != null) {
//            helpYKienKhanGIaButon.addActionListener(e -> {
//                if (!helpAudienceUsedClient && currentQuestion != null) {
//                    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn dùng trợ giúp Hỏi ý kiến khán giả không?", "Xác nhận Hỏi Khán Giả", JOptionPane.YES_NO_OPTION);
//                    if (confirm == JOptionPane.YES_OPTION) {
//                        PlayAudioURL.playClickAudio();
//                        gameClient.sendMessage(new Message(MessageType.C2S_USE_HELP_AUDIENCE, new Object[]{roomId, currentQuestion.getId()}));
//                        if (gameStatusLabel != null) gameStatusLabel.setText("Đang yêu cầu trợ giúp Hỏi khán giả...");
//                    }
//                }
//            });
//        }
        if (helpCallButon != null) {
            helpCallButon.addActionListener(e -> {
                if (helpCallUsedClient || currentQuestion == null || !gameClient.isConnected()) return;

                int confirm = JOptionPane.showConfirmDialog(this,
                        "Bạn có chắc muốn sử dụng trợ giúp Gọi điện thoại cho người thân không?",
                        "Xác nhận Gọi Điện", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (confirm == JOptionPane.YES_OPTION) {
                    PlayAudioURL.playClickAudio();
                    gameClient.sendMessage(new Message(MessageType.C2S_USE_HELP_CALL, new Object[]{roomId, currentQuestion.getId()}));
                    if (gameStatusLabel != null) gameStatusLabel.setText("Đang kết nối với chuyên gia...");
                }
            });
        }

        // --- HELP ASK THE AUDIENCE ---
        if (helpYKienKhanGIaButon != null) {
            helpYKienKhanGIaButon.addActionListener(e -> {
                if (helpAudienceUsedClient || currentQuestion == null || !gameClient.isConnected()) return;

                int confirm = JOptionPane.showConfirmDialog(this,
                        "Bạn có chắc muốn sử dụng sự trợ giúp Hỏi ý kiến khán giả không?",
                        "Xác nhận Hỏi Khán Giả", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (confirm == JOptionPane.YES_OPTION) {
                    PlayAudioURL.playClickAudio();
                    gameClient.sendMessage(new Message(MessageType.C2S_USE_HELP_AUDIENCE, new Object[]{roomId, currentQuestion.getId()}));
                    if (gameStatusLabel != null) gameStatusLabel.setText("Đang khảo sát ý kiến khán giả...");
                }
            });
        }

        // --- CHAT IN GAME ---
        ActionListener sendChatActionInGame = e -> {
            String messageText = chatInputFieldInGame.getText().trim();
            if (!messageText.isEmpty() && gameClient.isConnected()) {
                PlayAudioURL.playClickAudio(); // Âm thanh khi gửi tin nhắn
                // Gửi tin nhắn chat lên server, sử dụng lại MessageType.C2S_LOBBY_CHAT
                // hoặc bạn có thể tạo MessageType.C2S_GAME_CHAT nếu muốn phân biệt
                gameClient.sendMessage(new Message(MessageType.C2S_LOBBY_CHAT, messageText));
                chatInputFieldInGame.setText(""); // Xóa nội dung đã nhập
                logger.info("Gửi tin nhắn trong game: " + messageText);
            } else if (!gameClient.isConnected()) {
                showErrorMessage("Mất kết nối, không thể gửi tin nhắn.");
            }
        };

        if (sendChatInGameButton != null) {
            sendChatInGameButton.addActionListener(sendChatActionInGame);
        }
        if (chatInputFieldInGame != null) {
            chatInputFieldInGame.addActionListener(sendChatActionInGame); // Cho phép gửi bằng Enter
        }
    }

    public void updateOpponentInfo(String name, String avatarPath, int score) {
        SwingUtilities.invokeLater(() -> {
            if (opponentNameLabel != null) opponentNameLabel.setText("" + name);
            if (opponentScoreLabel != null) opponentScoreLabel.setText("" + score);
            if (opponentAvatarLabel != null) {
                try {
                    if (avatarPath != null && !avatarPath.isEmpty()) {
                        opponentAvatarLabel.setIcon(new ImageIcon(getClass().getResource("/avatar/" + avatarPath + ".png")));
                    } else {
                        opponentAvatarLabel.setIcon(new ImageIcon(getClass().getResource("/avatar/default.png")));
                    }
                } catch (Exception e) {
                    opponentAvatarLabel.setIcon(new ImageIcon(getClass().getResource("/avatar/default.png")));
                    logger.warning("Không tải được avatar đối thủ: " + avatarPath);
                }
            }
        });
    }

    public void enableAnswerButtons(boolean enable) {
        SwingUtilities.invokeLater(() -> {
            aButon.setEnabled(enable);
            bButon.setEnabled(enable);
            cButon.setEnabled(enable);
            dButon.setEnabled(enable);
        });
    }

    private void resetAnswerButtonColors() {
        // Đặt lại màu nền mặc định cho các nút đáp án
        // (Copy từ GameFrame nếu bạn có logic đổi màu khi chọn hoặc hiển thị đáp án đúng/sai)
        // aButon.setBackground(new Color(247, 248, 211)); // Ví dụ
        // bButon.setBackground(new Color(247, 248, 211));
        // cButon.setBackground(new Color(247, 248, 211));
        // dButon.setBackground(new Color(247, 248, 211));
    }





    public void notifyOpponentAnswered() {
        SwingUtilities.invokeLater(() -> {
            if (gameStatusLabel != null) gameStatusLabel.setText("Đối thủ đã trả lời. Chờ bạn...");
        });
    }

    public void notifyTimeUp(int questionId) {
        SwingUtilities.invokeLater(() -> {
            enableAnswerButtons(false);
            if (gameStatusLabel != null) gameStatusLabel.setText("Hết giờ cho câu hỏi " + questionId + "!");
            // Server sẽ gửi kết quả sau đó
        });
    }

    public void showGameOver(String winnerUsername, int prize, boolean iAmWinner) {
        SwingUtilities.invokeLater(() -> {
            enableAnswerButtons(false);
            String message;
            if (winnerUsername == null || winnerUsername.isEmpty()) { // Hòa hoặc lỗi
                message = "Trận đấu kết thúc hòa!";
            } else if (iAmWinner) {
                message = "Chúc mừng! Bạn đã thắng và nhận được " + prize + " xu!";
//                PlayAudioURL.playAudio(getClass().getResource("/audio/win_game.wav")); // Ví dụ
            } else {
                message = "Rất tiếc! Bạn đã thua. " + winnerUsername + " thắng và nhận được " + prize + " xu.";
//                PlayAudioURL.playAudio(getClass().getResource("/audio/lose_game.wav")); // Ví dụ
            }
            if (gameStatusLabel != null) gameStatusLabel.setText(message);
            questionLabel.setText("TRẬN ĐẤU KẾT THÚC");

            JOptionPane.showMessageDialog(this, message, "Kết Thúc Trận Đấu", JOptionPane.INFORMATION_MESSAGE);
            // TODO: Thêm nút "Quay lại Sảnh chờ" hoặc tự động đóng frame sau vài giây
            // Hiện tại, người dùng phải đóng thủ công (đã có xử lý windowClosing)
            // hoặc server có thể gửi S2C_RETURN_TO_LOBBY
        });
    }
    public void updateScores(int newMyOnlineScore, int newOpponentOnlineScore) {
        SwingUtilities.invokeLater(() -> {
            this.myOnlineScore = newMyOnlineScore; // Cập nhật biến điểm nội bộ
            if (moneyLabel != null) { // moneyLabel hiển thị điểm của người chơi hiện tại
                moneyLabel.setText("Điểm: " + this.myOnlineScore);
            }

            if (opponentScoreLabel != null) { // opponentScoreLabel hiển thị điểm của đối thủ
                opponentScoreLabel.setText("Điểm: " + newOpponentOnlineScore);
            }
            logger.info("UI Cập nhật điểm: Bạn - " + newMyOnlineScore + ", Đối thủ - " + newOpponentOnlineScore);
        });
    }

    // Display method
    public void displayQuestion(QuestionModel question, int totalTimeInSeconds) {
        SwingUtilities.invokeLater(() -> {
            this.currentQuestion = question;
            questionCurrentIndex++; // Tăng thứ tự câu hỏi
            if (questionLabel != null) questionLabel.setText("<html>" + question.getQuestion() + "</html>");
            if (aButon != null) aButon.setText("A. " + question.getOptionA());
            if (bButon != null) bButon.setText("B. " + question.getOptionB());
            if (cButon != null) cButon.setText("C. " + question.getOptionC());
            if (dButon != null) dButon.setText("D. " + question.getOptionD());

            // Cập nhật số thứ tự câu hỏi
            if (questionCurrentIndexLabel != null) {
                questionCurrentIndexLabel.setText(String.valueOf(questionCurrentIndex));
            }

            setEableButon();
            if (gameStatusLabel != null) gameStatusLabel.setText("Thời gian: " + totalTimeInSeconds + "s");
            logger.info("Hiển thị câu hỏi thứ " + questionCurrentIndex);
        });

        updateHelpButtonStates();
        enableAnswerButtons(true);
    }

    public void showErrorMessage(String errorMessage) { // Thêm phương thức này
        SwingUtilities.invokeLater(() -> {
            if (gameStatusLabel != null) {
                gameStatusLabel.setText("LỖI: " + errorMessage);
                gameStatusLabel.setForeground(Color.RED);
            }
            JOptionPane.showMessageDialog(this, errorMessage, "Lỗi Game Online", JOptionPane.ERROR_MESSAGE);
        });
    }

    public void showAnswerResult(int questionId, int myChoice, boolean myResult, int opponentChoice, boolean opponentResult, int correctAnswerIndex) {
        SwingUtilities.invokeLater(() -> {
            disableButtons();
            String resultText = "Câu hỏi " + questionId + ": ";
            resultText += "Bạn chọn " + (myChoice > 0 ? (char) ('A' + myChoice - 1) : "không chọn") + " (" + (myResult ? "Đúng" : "Sai") + "). ";
            resultText += "Đối thủ chọn " + (opponentChoice > 0 ? (char) ('A' + opponentChoice - 1) : "không chọn") + " (" + (opponentResult ? "Đúng" : "Sai") + "). ";
            resultText += "Đáp án đúng: " + (char) ('A' + correctAnswerIndex - 1) + ".";
            if (gameStatusLabel != null) gameStatusLabel.setText(resultText);
            logger.info("Kết quả câu hỏi " + questionId + ": " + resultText);

            // TODO: Tô màu các nút đáp án để hiển thị đúng/sai
            // highlightAnswer(myChoice, myResult);
            // highlightCorrectAnswer(correctAnswerIndex);

            // Chờ một chút rồi server sẽ gửi câu hỏi mới hoặc game over
        });
    }

    private void updateHelpButtonStates() {
        if (help5050Buton != null) help5050Buton.setEnabled(!help5050UsedClient);
        if (x1 != null) x1.setVisible(help5050UsedClient); // Hiện dấu X nếu đã dùng

        if (helpCallButon != null) helpCallButon.setEnabled(!helpCallUsedClient);
        if (x2 != null) x2.setVisible(helpCallUsedClient);

        if (helpYKienKhanGIaButon != null) helpYKienKhanGIaButon.setEnabled(!helpAudienceUsedClient);
        if (x3 != null) x3.setVisible(helpAudienceUsedClient);
    }

    /*Các nút trợ giúp*/
    // Trong OnlineGameFrame.java
    public void display5050Result(int questionId, int optionToRemove1Index, int optionToRemove2Index) {
        SwingUtilities.invokeLater(() -> {
            if (currentQuestion == null || currentQuestion.getId() != questionId) {
                logger.warning("display5050Result: questionId không khớp hoặc currentQuestion là null.");
                return;
            }
            PlayAudioURL.playAudio(getClass().getResource("/audio/level-up-191997.wav")); // Âm thanh thành công
            logger.info("Hiển thị kết quả 50/50: Loại bỏ đáp án " + optionToRemove1Index + " và " + optionToRemove2Index);
            if (gameStatusLabel != null) gameStatusLabel.setText("Trợ giúp 50/50: Hai phương án sai đã được loại bỏ.");

            help5050UsedClient = true; // Đánh dấu đã dùng
            updateHelpButtonStates();   // Cập nhật UI nút (vô hiệu hóa vĩnh viễn + hiện X)

            // Vô hiệu hóa hoặc làm trống các nút bị loại
            // Giả sử aButon=1, bButon=2, cButon=3, dButon=4
            JButton[] answerButtons = {aButon, bButon, cButon, dButon};
            if (optionToRemove1Index >= 1 && optionToRemove1Index <= 4) {
                if (answerButtons[optionToRemove1Index - 1] != null) {
                    answerButtons[optionToRemove1Index - 1].setText(""); // Làm trống
                    answerButtons[optionToRemove1Index - 1].setEnabled(false); // Vô hiệu hóa
                }
            }
            if (optionToRemove2Index >= 1 && optionToRemove2Index <= 4) {
                if (answerButtons[optionToRemove2Index - 1] != null) {
                    answerButtons[optionToRemove2Index - 1].setText(""); // Làm trống
                    answerButtons[optionToRemove2Index - 1].setEnabled(false); // Vô hiệu hóa
                }
            }
        });
    }

    // Trong OnlineGameFrame.java
    // Trong OnlineGameFrame.java
    /**
     * Xử lý khi server xác nhận cho phép sử dụng trợ giúp Gọi điện thoại.
     * Client sẽ tự mở HelpCallFrame.
     * @param questionIdFromServer ID của câu hỏi mà trợ giúp được áp dụng.
     */
    public void displayCallResult(int questionIdFromServer) {
        SwingUtilities.invokeLater(() -> {
            if (currentQuestion == null || currentQuestion.getId() != questionIdFromServer) {
                logger.warning("displayCallResult: questionId (" + questionIdFromServer +
                        ") không khớp với currentQuestion ID (" +
                        (currentQuestion != null ? currentQuestion.getId() : "null") +
                        ") hoặc currentQuestion là null.");
                // Có thể cần thông báo lỗi hoặc không làm gì cả nếu không đúng câu hỏi
                return;
            }

            logger.info("Server đã cho phép sử dụng Gọi điện thoại cho câu hỏi ID: " + currentQuestion.getId());
            PlayAudioURL.playClickAudio(); // Hoặc âm thanh riêng cho việc trợ giúp được chấp nhận

            // Tạm thời vô hiệu hóa các nút trả lời khi HelpCallFrame đang mở
            // để tránh người dùng trả lời trong khi frame trợ giúp còn đó.
            enableAnswerButtons(false);

            // Hiển thị HelpCallFrame với câu hỏi hiện tại.
            // HelpCallFrame sẽ là một cửa sổ modal hoặc có cơ chế callback/listener
            // để OnlineGameFrame biết khi nào nó đóng.
            OnlineHelpCallFrame callFrame = new OnlineHelpCallFrame(currentQuestion); // Giả sử constructor nhận QuestionModel
            callFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Quan trọng: chỉ đóng frame trợ giúp

            // Thêm WindowListener để biết khi HelpCallFrame đóng
            callFrame.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    // Khi HelpCallFrame đóng, kiểm tra xem có nên kích hoạt lại nút trả lời không.
                    // Chỉ kích hoạt lại nếu game vẫn đang tiếp diễn và chưa có câu trả lời nào được gửi.
                    if (gameClient.isConnected() &&
                            currentQuestion != null && // Còn câu hỏi
                            // !đã gửi câu trả lời cho currentQuestion // Cần một cờ để theo dõi điều này nếu cần
                            !"TRẬN ĐẤU KẾT THÚC".equals(questionLabel.getText()) && // Game chưa kết thúc
                            aButon.isEnabled() == false) { // Kiểm tra xem nút có đang bị vô hiệu hóa không (tránh enable lại nhiều lần)

                        // Kiểm tra xem có phải tất cả các nút đang bị disable không,
                        // nếu chỉ có 1-2 nút bị disable do 50/50 thì không enable lại toàn bộ.
                        // Tốt nhất là enableAnswerButtons(true) sẽ set lại trạng thái dựa trên 50/50 đã dùng hay chưa.
                        // Hoặc, enableAnswerButtons có thể cần thông minh hơn.
                        // Hiện tại, cứ enable lại tất cả các nút chưa bị 50/50 loại.
                        boolean is5050Active = help5050UsedClient; // Kiểm tra xem 50/50 có đang active không
                        if (is5050Active) {
                            // Nếu 50/50 active, chỉ enable 2 nút còn lại
                            // (Logic này cần được làm cẩn thận hơn, dựa vào nút nào đã bị 50/50 loại)
                            // Tạm thời, nếu 50/50 đã dùng, không enable lại bằng cách này mà để display5050Result xử lý
                            // Nếu không, enable lại tất cả
                            enableAppropriateAnswerButtonsAfterHelp();
                        } else {
                            enableAnswerButtons(true);
                        }
                    }
                    logger.info("HelpCallFrame đã đóng.");
                    if (gameStatusLabel != null) gameStatusLabel.setText("Bạn đã tham khảo ý kiến chuyên gia.");
                }
            });
            callFrame.setVisible(true); // Hiển thị frame trợ giúp

            helpCallUsedClient = true;      // Đánh dấu đã sử dụng trợ giúp này ở client
            updateHelpButtonStates();       // Cập nhật UI: vô hiệu hóa nút Gọi điện, hiện dấu X
        });
    }

    // Phương thức mới để kích hoạt lại các nút trả lời một cách thông minh sau khi trợ giúp đóng
    private void enableAppropriateAnswerButtonsAfterHelp() {
        SwingUtilities.invokeLater(() -> {
            if (help5050UsedClient) {
                // Nếu 50/50 đã được dùng, chỉ kích hoạt các nút không bị loại bởi 50/50
                // Giả sử bạn có cách lưu trữ nút nào đã bị 50/50 loại bỏ
                // Hoặc, bạn có thể làm cho logic trong display5050Result chỉ setText("")
                // thay vì setEnabled(false), và ở đây bạn setEnabled(true) cho tất cả các nút có text.
                // Ví dụ đơn giản:
                if (aButon.getText() != null && !aButon.getText().isEmpty()) aButon.setEnabled(true);
                if (bButon.getText() != null && !bButon.getText().isEmpty()) bButon.setEnabled(true);
                if (cButon.getText() != null && !cButon.getText().isEmpty()) cButon.setEnabled(true);
                if (dButon.getText() != null && !dButon.getText().isEmpty()) dButon.setEnabled(true);
            } else {
                enableAnswerButtons(true); // Kích hoạt tất cả nếu 50/50 chưa dùng
            }
        });
    }
    // Trong OnlineGameFrame.java
    public void displayAudienceResult(int questionIdFromServer, Map<Integer, Double> pollResults, int mostVotedOptionIndex) {
        SwingUtilities.invokeLater(() -> {
            if (currentQuestion == null || currentQuestion.getId() != questionIdFromServer) {
                logger.warning("displayAudienceResult: questionId không khớp hoặc currentQuestion là null.");
                return;
            }
            PlayAudioURL.playPopOnAudio();

            // Xây dựng text hiển thị tỷ lệ (tùy chọn, có thể chỉ cần ảnh)
            // StringBuilder pollText = new StringBuilder("Kết quả bình chọn của khán giả:\n\n");
            // char option = 'A';
            // for (int i = 1; i <= 4; i++) {
            //     double percentage = pollResults.getOrDefault(i, 0.0);
            //     pollText.append("Đáp án ").append(option++).append(": ")
            //             .append(String.format("%.0f%%", percentage * 100)).append("\n");
            // }
            // logger.info("Hiển thị kết quả Hỏi khán giả:\n" + pollText.toString());

            String imagePath = "/elements/Ý kiến khán giả (A).png"; // Mặc định hoặc ảnh chung
            switch (mostVotedOptionIndex) { // mostVotedOptionIndex là đáp án được khán giả chọn nhiều nhất
                case 1: imagePath = "/elements/Ý kiến khán giả (A).png"; break;
                case 2: imagePath = "/elements/Ý kiến khán giả (B).png"; break;
                case 3: imagePath = "/elements/Ý kiến khán giả (C).png"; break;
                case 4: imagePath = "/elements/Ý kiến khán giả (D).png"; break;
                default: // Nếu server không gửi mostVotedOptionIndex hoặc nó không hợp lệ
                    logger.warning("mostVotedOptionIndex không hợp lệ: " + mostVotedOptionIndex + ". Sử dụng ảnh mặc định.");
                    // Có thể hiển thị text pollResults thay vì ảnh nếu không có mostVotedOptionIndex
                    // Hoặc bạn có thể tự tính mostVotedOptionIndex từ pollResults ở client
                    break;
            }

            try {
                JOptionPane.showMessageDialog(this, // Hoặc null cho parentComponent nếu muốn dialog ở giữa màn hình
                        null, // Không cần message text nếu đã có ảnh
                        "Hỏi ý kiến khán giả",
                        JOptionPane.INFORMATION_MESSAGE,
                        new ImageIcon(getClass().getResource(imagePath)));
            } catch (Exception ex) {
                logger.log(Level.WARNING, "Không thể tải ảnh hỏi khán giả: " + imagePath, ex);
                // Fallback hiển thị text nếu không có ảnh
                StringBuilder fallbackText = new StringBuilder("Kết quả hỏi khán giả:\n");
                for (Map.Entry<Integer, Double> entry : pollResults.entrySet()) {
                    fallbackText.append("Đáp án ").append((char)('A' + entry.getKey() - 1)).append(": ")
                            .append(String.format("%.0f%%", entry.getValue() * 100)).append("\n");
                }
                JOptionPane.showMessageDialog(this, fallbackText.toString().trim(), "Kết Quả Hỏi Khán Giả", JOptionPane.INFORMATION_MESSAGE);
            }


            if (gameStatusLabel != null) gameStatusLabel.setText("Khán giả trường quay đã đưa ra lựa chọn.");
            helpAudienceUsedClient = true;
            updateHelpButtonStates();
        });
    }
    public void notifyOpponentUsedHelp(String opponentUsername, String helpTypeDescription) {
        SwingUtilities.invokeLater(() -> {
            String message = "Đối thủ " + opponentUsername + " " + helpTypeDescription + ".";
            if (gameStatusLabel != null) {
                gameStatusLabel.setText(message);
            } else { // Nếu gameStatusLabel không có chỗ, có thể append vào chat
                // appendChatMessageToArea("Hệ thống: " + message); // Tạo phương thức này nếu cần
            }
            logger.info(message);
            // Không cần hiển thị JOptionPane ở đây để tránh làm gián đoạn người chơi
        });
    }

    public void handleHelpUnavailable(String reason) {
        SwingUtilities.invokeLater(() -> {
            if (gameStatusLabel != null) gameStatusLabel.setText("Trợ giúp không khả dụng: " + reason);
            JOptionPane.showMessageDialog(this, "Trợ giúp không khả dụng: " + reason, "Lỗi Trợ Giúp", JOptionPane.WARNING_MESSAGE);
            updateHelpButtonStates(); // Cập nhật lại trạng thái nút (có thể server từ chối nhưng client chưa vô hiệu hóa)
        });
    }

    /**
     * Hiển thị một tin nhắn chat nhận được lên chatArea.
     * @param message Tin nhắn đầy đủ (ví dụ: "Username: Nội dung tin nhắn")
     */
    public void appendChatMessageToArea(String message) {
        SwingUtilities.invokeLater(() -> {
            if (chatArea != null) {
                chatArea.append(message + "\n");
                chatArea.setCaretPosition(chatArea.getDocument().getLength()); // Tự động cuộn xuống
                logger.fine("Tin nhắn game được hiển thị: " + message);
            } else {
                logger.warning("chatArea is null, không thể hiển thị tin nhắn: " + message);
            }
        });
    }

    private static final Logger logger = Logger.getLogger(OnlineGameFrame.class.getName());


    private int currentSelectedAnswer;
    private int myOnlineScore;
    private PlayerModel currentPlayer;

    private PlayerModel opponentPlayer;
    private GameClient gameClient;
    private String roomId;
    private QuestionModel currentQuestion;
    private static boolean disable5050Called = false;
    private static boolean disableCallCalled = false;
    private static boolean disableKhanGiaCalled = false;
    private QuestionModel questionModel;
    private Clip question1to5Audio = null;
    private int questionCurrentIndex;

    private boolean help5050UsedClient = false; // Theo dõi phía client
    private boolean helpCallUsedClient = false;
    private boolean helpAudienceUsedClient = false;
    private int currentQuestionCorrectAnswerIndex;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton aButon;
    private javax.swing.JLabel aiLaTrieuPhuText;
    private javax.swing.JLabel avatarLabel;
    private static javax.swing.JButton bButon;
    private javax.swing.JLabel backgroundLabel;
    private static javax.swing.JButton cButon;
    private javax.swing.JTextArea chatArea;
    private javax.swing.JTextField chatInputFieldInGame;
    private javax.swing.JLabel chatLabel;
    private javax.swing.JScrollPane chatPane;
    private static javax.swing.JButton dButon;
    private javax.swing.JLabel gameStatusLabel;
    private static javax.swing.JButton help5050Buton;
    private javax.swing.JLabel help5050Label;
    private static javax.swing.JButton helpCallButon;
    private javax.swing.JLabel helpCallLabel;
    private static javax.swing.JButton helpYKienKhanGIaButon;
    private javax.swing.JLabel helpYKienKhanGIaLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JLabel laiVanSam;
    private javax.swing.JLabel moneyLabel;
    private javax.swing.JLabel moneyShowLabel;
    private javax.swing.JLabel opponentAvatarLabel;
    private javax.swing.JLabel opponentNameLabel;
    private javax.swing.JLabel opponentScoreLabel;
    private javax.swing.JLabel questionAndAnswerLable;
    private javax.swing.JLabel questionCurrentIndexLabel;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JLabel scoreLabel1;
    private javax.swing.JButton sendChatInGameButton;
    private javax.swing.JButton setAvatarButon;
    private javax.swing.JButton stopButon;
    private javax.swing.JLabel stopLabel;
    private javax.swing.JLabel unameAndAvtLabel;
    private javax.swing.JLabel unameAndAvtLabel1;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JLabel versusIcon;
    private static javax.swing.JLabel x1;
    private static javax.swing.JLabel x2;
    private static javax.swing.JLabel x3;
    // End of variables declaration//GEN-END:variables
}

